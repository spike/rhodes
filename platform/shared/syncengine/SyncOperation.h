/*
 *  SyncOperation.h
 *  RhoSyncClient
 *  Manages connections to rhosync service
 *
 *  Copyright (C) 2008 Lars Burgess. All rights reserved.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __SYNCOPERATION__
#define __SYNCOPERATION__

#include <stdlib.h>
#include "Utils.h"
#include "SyncObject.h"
#include "Source.h"

#if defined(__cplusplus)
extern "C" {
#endif
	
#define POST_BODY_SIZE 4096
#define SYNC_URI_SIZE 2048

/*
 * Used to store a rhosync operation which is used
 * to construct the request uri. The format is the following:
 * http://<host>:<port>/<controller>/<source_id>/<operation>
 */
typedef struct {
	pSyncObject		_sync_object;	/* represents the object being updated */
	char*			_operation;		/* the operation to perform (UPDATE_TYPE_UPDATE, UPDATE_TYPE_CREATE, UPDATE_TYPE_DELETE) */
	int  			_source_id;		/* source_id for operation */
	char*			_uri;			/* holds the generate request uri generated by setSyncUri */
	char*			_post_body;		/* holds the post body for the operation */
} SyncOperation;

typedef SyncOperation* pSyncOperation;

void finalize_sync_op_statements();	

/*
 * Creates an instance of SyncOperation and populates the operation information
 */
pSyncOperation SyncOperationCreate(pSyncObject new_sync_object, char *source, char *operation);

/*
 * Generate the sync uri based on values in struct
 */
void set_sync_uri(pSyncOperation sync, char *source);

/*
 * Construct the body of the request by filtering 
 * the attr_filter string.
 */
void set_sync_post_body(pSyncOperation op);
	
/* Retrieves the current list of objects for remote processing */
int get_op_list_from_database(pSyncOperation *list, sqlite3* database, int max_count, pSource source, char *type);
	
/* remove the operations from the database after processing */
void remove_op_list_from_database(pSyncOperation *list, sqlite3 *database, char *type);

void free_op_list(pSyncOperation *list, int available);
	
/* 
 * Releases the current SyncManager instance
 */
void SyncOperationRelease(pSyncOperation sync);
	
#if defined(__cplusplus)
}
#endif

#endif