<!--
 ============================================================================
 Author	    : Anton Antonov
 Version	: 1.0
 Copyright  : Copyright (C) 2008 Rhomobile. All rights reserved.

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ============================================================================
-->
<?html version="1.0" enconding="UTF-8"?>

<project basedir=".." default="all" name="Rhodes">

    <fail message="build.properties does not exist, please copy build.properties.sample and fill in your settings.">
        <condition>
            <not>
                <available file="${basedir}/build/build.properties" />
            </not>
        </condition>
    </fail>


   <!--
    ========================================================================
      ALL
    ========================================================================
    -->
    <target name="all">            
       <echo message="Usage: ant [options]"/>      
       <echo message=""/> 
       <echo message="where options is"/>
       <echo message=""/> 
       <echo message="For testing on emulator (WINSCW)"/> 
       <echo message="build-apps             : to clean + build apps + build rhodes + execute emulator"/>
       <echo message=""/> 
       <echo message="For developement only: build based on working dirs"/> 
       <echo message="build-all              : to clean + build + make sis + sign sis (no checkout)"/>
       <echo message="build-selfsign         : to clean + build + make sis + selfsign sis (no checkout)"/> 
       <echo message="build-build            : to build + make sis + sign sis (no clean, no checkout)"/> 
       <echo message="build-sis              : to make sis + sign sis (no clean, no checkout, no build)"/>
       <echo message=""/>
       <echo message="Checkout latest version from GIT into the distinct directory and build release version"/>
       <echo message="release               : to checkout + build + make sis + sign sis"/>
       <echo message="release-selfsign      : to checkout + build + make sis + selfsign sis"/>  
       <echo message="release-nosign        : to checkout + build + make sis (no sign sis files)"/>  
       <echo message=""/>
       <echo message="rhobundle             : to make rhobundle"/>
    </target> 

    <target name="release"           depends="init, clean, build, checkout-src, compile, make-sis, sign-sis"/>
    <target name="release-selfsign"  depends="init, clean, build, checkout-src, compile, make-sis, selfsign-sis"/> 
    <target name="release-nosign"    depends="init, clean, build, checkout-src, compile, make-sis"/>
    
    <!-- These execute on working dirs (for dev purpose) -->    
    <target name="build-all"       depends="clean, build-build"/>
    <target name="build-selfsign"  depends="init, clean, build-no-checkout, compile, make-sis, selfsign-sis"/>
    <target name="build-build"     depends="init, build-no-checkout, compile, make-sis, sign-sis"/>
    <target name="build-sis"       depends="init, build-no-checkout, make-sis, sign-sis"/>

	<!-- testing on emulator -->
	<target name="build-apps"       depends="init-apps, clean-apps, appbuild, run-app"/>
	
    <!--
    ========================================================================
      INIT: Setting variables
    ========================================================================
    -->
    <target name="init">

		<!--
			Root directory
		-->	
	    <property name="root.dir" value="${basedir}"/>
	    <echo message="root: ${root.dir}" />

		<!-- 
			Build directory
		-->	
		<property name="build.dir" value="${root.dir}/build"/>
		
	    <!-- Load property file -->
	    
	    <!-- Base directories, epocroot etc... -->
	    <property file="${root.dir}/build/build.properties"/>
	    
        <!-- 
            Output dir: Symbian GCCE compiler may fail if paths are too long... :)
            So keep this in mind...
        -->
        <property name="bin.dir" value="${root.dir}/bin"/>
        
        <!-- 
            Output dir: Rhobundle source dir, place where ruby applications will be placed
        -->      
        <property name="src.dir" value="${bin.dir}/RhoBundle" />
        
        <!-- 
        	Path to the shared ant build directory
        -->
        <property name="sharedAnt.dir" value="${root.dir}/../shared/build" />	
        
		<!-- 
		    This is where the Symbian certificate & key files are placed.
		-->
    	<property name="dir.cert" value="${root.dir}/rhodes/sis/cert"/>
	
		<!-- Available S60 SDKs -->
		
		<condition property="epocroot" value="${S60_3rd_FP1}">
	        <equals arg1="${SDK}" arg2="S60_3rd_FP1" trim="true"/>
	    </condition>
	    
		<fail message="Nokia S60 SDK must be specified, for example: ant -DSDK=S60_3rd_FP1 ...">
	        <condition>
	        	<not>
		         	<isset property="epocroot"/>
		       	</not>
	        </condition>
	    </fail>

	    <echo message="Nokia S60 SDK: ${SDK}" />
	    <echo message="epocroot: ${epocroot}" />
	
		<!-- 
			Output directory for sis
		-->	
		<property name="dir.output"  value="${root.dir}/target/${SDK}"/>

		<!-- Log files -->
    	<property name="log.build" value="${bin.dir}/build.log"/>
		
		<!--
			This directory will be used to store latest version of the sources from GIT
			For release build local sources will not be used
		-->	 
		<property name="dir.export.GIT"     value="${bin.dir}/export"/>
        
		<property name="frameworklib.dir" location="${build.dir}\..\..\shared\framework\lib" />
		
    </target>

	<!--
    ========================================================================
      INIT APPS BUILD
    ========================================================================
    -->
	<target name="init-apps" depends="init">
		<!--
		    Reset build.target 
		-->
		
		<property name="apps.root"  value="${epocroot}\epoc32\winscw\c\Data\Rho"/>
		
		<property name="rhodes.app"  value="${epocroot}\epoc32\release\winscw\udeb\rhodes.exe"/>
		
		<property name="rhodes.app.dir"  value="${epocroot}\epoc32\release\winscw\udeb\"/>
		
		<property name="logfile.location"  value="${epocroot}\epoc32\winscw\c\Data\Rho\rhologpath.txt"/>
		    
	</target>

	<!--
    ========================================================================
      CLEAN DATA\RHO ON EMULATOR
    ========================================================================
    -->
    <target name="clean-apps" depends="clean">
    	
    	<echo message="Cleaning rho apps dir..."/>
        <delete dir="${apps.root}"/>
        <mkdir dir="${apps.root}"/>
        
    </target>
    
    <!--
    ========================================================================
      BUILD RHODES AND RUBY APPS FOR EMULATOR
    ========================================================================
    -->
    
    <target name="appbuild" depends="init-apps, build-no-checkout, compile">
    	<echo message="Build apps..."/>
    
    	<echo message="Copy rhobundle to the emulator..."/>
    	
    	<copy todir="${apps.root}">
		    <fileset dir="${src.dir}"/>
		</copy>
		
		<echo message="Enable rhodes logging if log file path is presented..."/>
		<copy file="${build.dir}/logfile.template" tofile="${logfile.location}"/>
		
		<replace file="${logfile.location}" token="{{LOGFILEPATH}}" value="${logfile.path}"/>
		
    </target>
    
    <!--
    ========================================================================
      RUN RHODES ON EMULATOR
    ========================================================================
    -->
    <target name="run-app" depends="init-apps">
	    
	    <echo message = "run rhodes application on emulator" />
	    <exec executable="cmd" dir="${rhodes.app.dir}" spawn="true">
	    	<arg line="/c ${rhodes.app}" />
	    </exec>
	    
    </target>
    
    <!--
    ========================================================================
      BUILD
    ========================================================================
    -->
    <target name="build" depends="init">
        
        <!-- Update the build date automatically, build number is manually set 
        <propertyfile file = "${build.dir}/release.properties" comment = "Rhodes release.properties" >
            <entry key="build.date"   type="date" value="now" pattern="yyyyMMdd"/>
            <entry key="build.number" type="int"  operation = "+" default="1"/>
        </propertyfile>-->
	
	    <!-- Load release.propeties -->
        <property file="${build.dir}/release.properties" />
        <echo message="" />
        <echo message="*************************" />
        <echo message="  Build release: ${release.major}.${release.minor}.${build.number}" />
        <echo message="*************************" />
        <echo message="" />
	    
	    <property name="package.name"      value="rhodes_v_${release.major}_${release.minor}_${build.number}"/> 
        <property name="dir.output.src"    value="${dir.output}/${package.name}"/>
	    
	    <!-- 
            Dirs to read src files from.
            For working build, we get files from working dir.
        -->
        <property name="dir.symbian"         value="${dir.export.GIT}/symbian"/>
	    <property name="dir.sis"             value="${dir.symbian}/rhodes/sis"/>
	    <property name="dir.cert" 			 value="${dir.symbian}/rhodes/sis/cert"/>
	    
		<property name="dir.rhodes.build"    value="${dir.symbian}/rhodes/group"/>
    	<property name="dir.shttpd.build"    value="${dir.symbian}/shttpd/group"/>
		<property name="dir.SQLite60.build"  value="${dir.symbian}/SQLite60/group"/>
		<property name="dir.rubylib.build"   value="${dir.symbian}/rubylib/group"/>
    </target>
    
    <!--
    ========================================================================
      BUILD-NO-CHECKOUT
    ========================================================================
    -->
    <target name="build-no-checkout" depends="init">
    
        <!-- Update the build date automatically, build number is manually set 
        <propertyfile file = "${build.dir}/release.properties" comment = "Rhodes working build" >
            <entry key="build.date"   type="date" value="now" pattern="yyyyMMdd"/>
            <entry key="build.number" type="int"  operation = "+" default="1"/>
        </propertyfile>-->
        
        <!-- Load release.propeties -->
        <property file="${build.dir}/release.properties" />
        <echo message="" />
        <echo message="*****************************" />
        <echo message="  Build working copy: ${release.major}.${release.minor}.${build.number}" />
        <echo message="*****************************" />
        <echo message="" />
        
	    <property name="package.name"      value="rhodes_v_${release.major}_${release.minor}_${build.number}"/> 
        <property name="dir.output.src"    value="${dir.output}/${package.name}"/>
	    
	    <!-- 
            Dirs to read src files from.
            For working build, we get files from working dir.
        -->
        <property name="dir.symbian"         value="${root.dir}"/>
	    <property name="dir.sis"             value="${dir.symbian}/rhodes/sis"/>
	    
		<property name="dir.rhodes.build"    value="${dir.symbian}/rhodes/group"/>
    	<property name="dir.shttpd.build"    value="${dir.symbian}/shttpd/group"/>
		<property name="dir.SQLite60.build"  value="${dir.symbian}/SQLite60/group"/>
		<property name="dir.rubylib.build"   value="${dir.symbian}/rubylib/group"/>

    </target>
    
    
    <!--
    ========================================================================
      CHECKOUT-SRC
    ========================================================================
    -->
    <target name="checkout-src" depends="init">
		<!-- Create directory for GIT -->    
		
        <!-- 
        Checkout files from GIT.
        -->
        <echo message="Checkout source files from GIT..."/>
        
        <macrodef name = "git">
		    <attribute name = "command" />
		    <attribute name = "dir" default = "" />
		    <element name = "args" optional = "true" />
		    <sequential>
		        <echo message = "git @{command}" />
		        <exec executable = "cmd" failonerror="true"  output="${log.build}" append="true" dir="@{dir}">
		            <arg value="/c"/>
		            <arg value="git" /> 
		            <arg value="@{command}" />
		            <args/>
		        </exec>
		    </sequential>
		</macrodef>
		
		<macrodef name = "git-clone-pull">
		    <attribute name = "repository" />
		    <attribute name = "dest" />
		    <sequential>
		        <git command = "clone">
		            <args>
		                <arg value = "@{repository}" />
		                <arg value = "@{dest}" />
		            </args>
		        </git>
		        <git command = "pull" dir = "@{dest}" />
		    </sequential>
		</macrodef>
		
		<git-clone-pull repository="${git.url}" dest="${dir.export.GIT}" />
    </target>
    
    <!--
    ========================================================================
      COMPILE
    ========================================================================
    -->
    <target name="compile" depends="init, clean_ablt, rhobundle">
        <!-- 
            Build files and compile all projects.
            Dirs used depends on which build target was called ('build' or 'build-no-checkout').
        -->
        
        <mkdir dir="${dir.output}"/>
        
        <echo message="Build target: ${build.target}" />
        
        <echo message="Compiling rubylib..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.rubylib.build}" executable="cmd" failonerror="true" output="${log.build}" append="true">
            <arg value="/c"/>
            <arg value="abld.bat"/>
		    <arg line="build ${build.target}"/>
		</exec>
		
        <echo message="Compiling SQLite60..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.SQLite60.build}" executable="cmd" failonerror="true" output="${log.build}" append="true">
            <arg value="/c"/>
            <arg value="abld.bat"/>
		    <arg line="build ${build.target}"/>
		</exec>
	        
        <echo message="Compiling shttpd..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.shttpd.build}" executable="cmd" failonerror="true" output="${log.build}" append="true">
            <arg value="/c"/>
            <arg value="abld.bat"/>
		    <arg line="build ${build.target}"/>
		</exec>

		<echo message="Compiling rhodes..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.rhodes.build}" executable="cmd" failonerror="true" output="${log.build}" append="true">
            <arg value="/c"/>
            <arg value="abld.bat"/>
		    <arg line="build ${build.target}"/>
		</exec>
        
        <!-- Open logs and continue -->
        <!-- 
        <exec dir="${dir.output}" executable="notepad" spawn="true">
            <arg line="${log.build}"/>
        </exec> 
        -->

    </target>
    
    <!--
    ========================================================================
      MAKE-SIS
    ========================================================================
    -->
    <target name="make-sis" depends="init">
        <!-- 
            Create .SIS package.
        -->
        
        <!-- Copy the PKG file: we modify it, so keep the original pkg unmodified -->
        <echo message="Patching the PKG file for standard build..."/>
        <copy file="${dir.sis}/rhodes.pkg" tofile="${dir.sis}/rhodes_tmp.pkg" overwrite="true"/>
        

        <!-- Update the release version: in PKG and config.ini -->
        <echo message="Update the release version..."/>
        <replace file="${dir.sis}/rhodes_tmp.pkg" token="${pkg.header},1,0,0" value="${pkg.header},${release.major},${release.minor},${build.number}"/>
        
        <!-- 
           Replace $(EPOCROOT) with the real path in PKG.
        -->
        <replace file="${dir.sis}/rhodes_tmp.pkg" token="$(EPOCROOT)" value="${epocroot}"/>
        
        <!-- 
           Replace $(PLATFORM) with the real platform in PKG.
        -->
        <replace file="${dir.sis}/rhodes_tmp.pkg" token="$(PLATFORM)" value="${sis.platform}"/>
        
        <!-- 
           Replace $(TARGET) with the real target in PKG.
        -->
        <replace file="${dir.sis}/rhodes_tmp.pkg" token="$(TARGET)" value="${sis.target}"/>
        
        <!-- 
        	Insert Rhobundle into the pkg
        -->
        <exec executable="${ruby.path}">
            <arg value="-R${frameworklib.dir}" />
            <arg value="${build.dir}\insertRhoBundle2pkg.rb" />
        </exec>	 
         
        <echo message="Make SIS package..."/>
        <exec dir="${dir.sis}" executable="makesis" failonerror="true">
            <arg line="rhodes_tmp.pkg"/>
        </exec>
        
        
        <!-- Remove the temporary pkg file -->
        <delete file="${dir.sis}/rhodes_tmp.pkg" />

        <!-- Copy & rename SIS file to output dir -->
        <copy file="${dir.sis}/rhodes_tmp.sis" tofile="${dir.output}/${package.name}.sis"/>   

    </target>

    <!--
    ========================================================================
      SIGN-SIS
    ========================================================================
    -->
    <target name="sign-sis" depends="init,make-sis"> 
        <!-- 
            Sign .SISX files with given certificate (see build.properties).
        -->
        
        <echo message="Sign SIS package..."/>
        <exec dir="${dir.sis}" executable="signsis" failonerror="true">
            <arg line="rhodes_tmp.sis ${package.name}.sisx ${dir.cert}/${cert.name} ${dir.cert}/${cert.key} ${cert.pwd}"/>
        </exec>

        <!-- Copy & rename signed SIS file to output dir -->
        <move file="${dir.sis}/${package.name}.sisx" tofile="${dir.output}/${package.name}.sisx"/>

		<!-- clean up -->
        <delete dir="${dir.sis}" includes="*.sis, *.SIS, *.sisx, *.rnd" />
		
    </target>
  
    <!--
    ========================================================================
      SELF-SIGN-SIS
    ========================================================================
    -->
  	<target name="selfsign-sis" depends="init,make-sis">
  		<echo message="Create self-signed package..."/>
        <mkdir dir="${dir.cert}"/>
		
		<echo message="Make keys..."/>
		<echo message="makekeys -cert -password ${selfsign.pwd} -len 2048 -dname ${selfsign.name} ${dir.cert}/${cert.key} ${dir.cert}/${cert.name}"/>
        <exec dir="${dir.sis}" executable="makekeys" failonerror="true">
            <arg line="-cert -password ${selfsign.pwd} -len 2048 -dname ${selfsign.name} ${dir.cert}/${cert.key} ${dir.cert}/${cert.name}"/>
        </exec>

        <echo message="Sign SIS package..."/>
        <exec dir="${dir.sis}" executable="signsis" failonerror="true">
            <arg line="rhodes_tmp.sis ${package.name}.sisx ${dir.cert}/${cert.name} ${dir.cert}/${cert.key} ${cert.pwd}"/>
        </exec>

        <!-- Copy & rename signed SIS file to output dir -->
        <move file="${dir.sis}/${package.name}.sisx" tofile="${dir.output}/${package.name}.sisx"/>
        
        <!-- clean up -->
        <delete dir="${dir.sis}" includes="*.sis, *.SIS, *.sisx, *.rnd" />
  		
  	</target>
  	     
    <!--
    ========================================================================
    CLEAN
    ========================================================================
    -->
    <target name="clean" depends="init">
    
        <mkdir dir="${bin.dir}"/>

        <echo message="Cleaning up dirs..."/>
        <delete dir="${bin.dir}"/>
        <delete dir="${dir.sis}" includes="*.sis, *.SIS, *.sisx, *.rnd" />
        
        <mkdir dir="${bin.dir}"/>
        <mkdir dir="${dir.output}"/>

    </target>

    <!--
    ========================================================================
    CLEAN ABLD
    ========================================================================
    -->
    
	<target name="clean_ablt" >

        <mkdir dir="${dir.output}"/>
        
        <echo message="Creating ABLD.BAT: 'bldmake bldfiles'..."/>
        <exec dir="${dir.rubylib.build}" executable="bldmake" failonerror="true">
            <arg line="bldfiles"/>
        </exec>
        <exec dir="${dir.SQLite60.build}" executable="bldmake" failonerror="true">
            <arg line="bldfiles"/>
        </exec>
        <exec dir="${dir.shttpd.build}" executable="bldmake" failonerror="true">
            <arg line="bldfiles"/>
        </exec>
        <exec dir="${dir.rhodes.build}" executable="bldmake" failonerror="true">
            <arg line="bldfiles"/>
        </exec>
	    
	    <echo message="Calling REALLYCLEAN for rhodes..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.rhodes.build}" executable="cmd" failonerror="true"  output="${log.build}" append="true">  
            <arg value="/c"/>
            <arg value="abld.bat"/>
            <arg line="reallyclean"/>
        </exec>
        
        <echo message="Calling REALLYCLEAN for shttpd..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.shttpd.build}" executable="cmd" failonerror="true"  output="${log.build}" append="true">  
            <arg value="/c"/>
            <arg value="abld.bat"/>
            <arg line="reallyclean"/>
        </exec>
        
        <echo message="Calling REALLYCLEAN for SQLite60..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.SQLite60.build}" executable="cmd" failonerror="true"  output="${log.build}" append="true">  
            <arg value="/c"/>
            <arg value="abld.bat"/>
            <arg line="reallyclean"/>
        </exec>
        
        <echo message="Calling REALLYCLEAN for rubylib..."/>
        <echo message="output to file: ${log.build}"/>
        <exec dir="${dir.rubylib.build}" executable="cmd" failonerror="true"  output="${log.build}" append="true">  
            <arg value="/c"/>
            <arg value="abld.bat"/>
            <arg line="reallyclean"/>
        </exec>
	</target>
	
	<target name="rhobundle" depends="init, clean">
		<echo message="Compiling RhoBundle..."/>
        <echo message="output to file: ${log.build}"/>
        <ant dir = "${sharedAnt.dir}" output="${log.build}" />
        
        <!--Remove Javascript and CSS-->
        <delete dir="${src.dir}/apps/shared/js">
          <!-- <exclude name="**/rho*.js" />-->
              <exclude name="**/iui.css" />
              <exclude name="**/*.png" /> 
        </delete>
        <!-- <delete dir="${src.dir}/apps/shared/css"/> -->
	</target>
	  	  
</project>
